{"version":3,"sources":["index.js"],"names":["tf","threshold","prev_time","frame_count","fps","_callee","model","_Users_ondyari_Documents_webapp_javascript_test_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","loadGraphModel","sent","abrupt","stop","classesDir","1","name","id","2","App","videoRef","React","createRef","canvasRef","detectFrame","video","startScope","executeAsync","_this","process_input","then","predictions","renderPredictions","requestAnimationFrame","endScope","ctx","current","getContext","clearRect","canvas","width","height","font","textBaseline","boxes","arraySync","scores","classes","dataSync","detections","buildDetectedObjects","forEach","item","x","y","strokeStyle","lineWidth","strokeRect","fillStyle","textWidth","measureText","toFixed","textHeight","parseInt","fillRect","fillText","d","Date","frame_time","Math","round","_this2","this","navigator","mediaDevices","getUserMedia","webCamPromise","audio","facingMode","stream","window","srcObject","Promise","resolve","reject","onloadedmetadata","modelPromise","load_model","all","values","catch","error","console","video_frame","fromPixels","toInt","transpose","expandDims","detectionObjects","document","getElementById","score","i","bbox","minY","offsetHeight","minX","offsetWidth","maxY","maxX","push","class","label","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","style","className","autoPlay","playsInline","muted","ref","Component","rootElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.1849f853.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as tf from '@tensorflow/tfjs';\nimport {loadGraphModel} from '@tensorflow/tfjs-converter';\nimport \"./styles.css\";\nimport { variable } from \"@tensorflow/tfjs\";\ntf.setBackend('webgl');\n\nconst threshold = 0.75;\nlet prev_time = 0.0;\nlet frame_count = 0;\nlet fps = 0;\n\nasync function load_model() {\n    // It's possible to load the model locally or from a repo\n    // You can choose whatever IP and PORT you want in the \"http://127.0.0.1:8080/model.json\" just set it before in your https server\n    //const model = await loadGraphModel(\"http://127.0.0.1:8080/model.json\");\n    const model = await loadGraphModel(\"https://raw.githubusercontent.com/hugozanini/TFJS-object-detection/master/models/kangaroo-detector/model.json\");\n    return model;\n  }\n\nlet classesDir = {\n    1: {\n        name: 'Kangaroo',\n        id: 1,\n    },\n    2: {\n        name: 'Other',\n        id: 2,\n    }\n}\n\nclass App extends React.Component {\n  videoRef = React.createRef();\n  canvasRef = React.createRef();\n\n\n  componentDidMount() {\n    if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n      const webCamPromise = navigator.mediaDevices\n        .getUserMedia({\n          audio: false,\n          video: {\n            facingMode: \"user\"\n          }\n        })\n        .then(stream => {\n          window.stream = stream;\n          this.videoRef.current.srcObject = stream;\n          return new Promise((resolve, reject) => {\n            this.videoRef.current.onloadedmetadata = () => {\n              resolve();\n            };\n          });\n        });\n\n      const modelPromise = load_model();\n\n      Promise.all([modelPromise, webCamPromise])\n        .then(values => {\n          this.detectFrame(this.videoRef.current, values[0]);\n        })\n        .catch(error => {\n          console.error(error);\n        });\n    }\n  }\n\n    detectFrame = (video, model) => {\n        tf.engine().startScope();\n        model.executeAsync(this.process_input(video)).then(predictions => {\n        this.renderPredictions(predictions, video);\n        requestAnimationFrame(() => {\n          this.detectFrame(video, model);\n        });\n        tf.engine().endScope();\n      });\n  };\n\n  process_input(video_frame){\n    const tfimg = tf.browser.fromPixels(video_frame).toInt();\n    const expandedimg = tfimg.transpose([0,1,2]).expandDims();\n    return expandedimg;\n  };\n\n  buildDetectedObjects(scores, threshold, boxes, classes, classesDir) {\n    const detectionObjects = []\n    var video_frame = document.getElementById('frame');\n\n    scores[0].forEach((score, i) => {\n      if (score > threshold) {\n        const bbox = [];\n        const minY = boxes[0][i][0] * video_frame.offsetHeight;\n        const minX = boxes[0][i][1] * video_frame.offsetWidth;\n        const maxY = boxes[0][i][2] * video_frame.offsetHeight;\n        const maxX = boxes[0][i][3] * video_frame.offsetWidth;\n        bbox[0] = minX;\n        bbox[1] = minY;\n        bbox[2] = maxX - minX;\n        bbox[3] = maxY - minY;\n        detectionObjects.push({\n          class: classes[i],\n          label: classesDir[classes[i]].name,\n          score: score.toFixed(4),\n          bbox: bbox\n        })\n      }\n    })\n    return detectionObjects\n  }\n\n  renderPredictions = predictions => {\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    // Font options.\n    const font = \"16px sans-serif\";\n    ctx.font = font;\n    ctx.textBaseline = \"top\";\n\n    //Getting predictions\n    const boxes = predictions[4].arraySync();\n    const scores = predictions[5].arraySync();\n    const classes = predictions[6].dataSync();\n    const detections = this.buildDetectedObjects(scores, threshold,\n                                    boxes, classes, classesDir);\n\n    detections.forEach(item => {\n      const x = item['bbox'][0];\n      const y = item['bbox'][1];\n      const width = item['bbox'][2];\n      const height = item['bbox'][3];\n\n      // Draw the bounding box.\n      ctx.strokeStyle = \"#00FFFF\";\n      ctx.lineWidth = 4;\n      ctx.strokeRect(x, y, width, height);\n\n      // Draw the label background.\n      ctx.fillStyle = \"#00FFFF\";\n      const textWidth = ctx.measureText(item[\"label\"] + \" \" + (100 * item[\"score\"]).toFixed(2) + \"%\").width;\n      const textHeight = parseInt(font, 10); // base 10\n      ctx.fillRect(x, y, textWidth + 4, textHeight + 4);\n    });\n\n    detections.forEach(item => {\n      const x = item['bbox'][0];\n      const y = item['bbox'][1];\n\n      // Draw the text last to ensure it's on top.\n      ctx.fillStyle = \"#000000\";\n      ctx.fillText(item[\"label\"] + \" \" + (100*item[\"score\"]).toFixed(2) + \"%\", x, y);\n    });\n\n    frame_count += 1;\n    var d = new Date();\n    if (prev_time == 0) {\n      prev_time = d;\n    }\n    if (frame_count % 10 == 0) {\n      let frame_time = (d - prev_time)/10;\n      fps = Math.round(1000/frame_time);\n      prev_time = d;\n    }\n    ctx.fillText(fps, 500, 400);\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Real-Time Object Detection Test via Javascript and Tensorflow.js</h1>\n        <h3>MobileNetV2 for now</h3>\n        <video\n          style={{height: '600px', width: \"500px\"}}\n          className=\"size\"\n          autoPlay\n          playsInline\n          muted\n          ref={this.videoRef}\n          width=\"600\"\n          height=\"500\"\n          id=\"frame\"\n        />\n        <canvas\n          className=\"size\"\n          ref={this.canvasRef}\n          width=\"600\"\n          height=\"500\"\n        />\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}